import os
import os.path
import torch
import numpy as np
import pandas
import csv
import random
from collections import OrderedDict
from .base_video_dataset import BaseVideoDataset
from lib.train.data import jpeg4py_loader
from lib.train.admin import env_settings


class COMTB_trainingSet(BaseVideoDataset):
    """
    RGBNIR 数据集:
        - groundtruth_rect.txt
        - rgb-nir.txt: 0-RGB 模态; 1-NIR 模态; 2-; 3-
    """

    def __init__(self, root=None, image_loader=jpeg4py_loader, split=None, data_fraction=None):
        self.root = env_settings().comtb_trainingset_dir if root is None else root
        super().__init__('COMTB_trainingSet', root, image_loader)

        # video_name for each sequence
        # NOTE: Easy_Set_Train: 430
        self.easy_list = ['1', '3', '4', '5', '9', '10', '11', '13', '14', '15', '16', '17', '23', '24', '25', '27',
                          '30', '34', '35', '36', '37', '39', '42', '46', '48', '49', '52', '53', '54', '56', '62',
                          '63', '65', '66', '68', '71', '72', '73', '74', '75', '77', '78', '79', '82', '83', '86',
                          '87', '88', '89', '91', '93', '94', '95', '97', '102', '104', '105', '106', '110', '111',
                          '113', '117', '121', '123', '125', '126', '130', '134', '138', '144', '146', '148', '149',
                          '152', '154', '155', '156', '158', '161', '164', '165', '168', '169', '170', '171', '172',
                          '173', '175', '177', '178', '180', '181', '183', '184', '185', '187', '193', '194', '196',
                          '199', '200', '201', '205', '207', '208', '212', '213', '215', '216', '217', '218', '219',
                          '221', '224', '225', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236',
                          '238', '239', '240', '241', '242', '246', '248', '250', '253', '257', '259', '265', '268',
                          '269', '270', '271', '272', '273', '274', '276', '280', '283', '286', '289', '291', '292',
                          '293', '294', '297', '298', '299', '300', '301', '302', '303', '304', '305', '308', '309',
                          '310', '311', '312', '313', '314', '316', '317', '318', '319', '321', '324', '325', '327',
                          '328', '329', '330', '331', '333', '334', '339', '342', '344', '345', '346', '351', '353',
                          '354', '355', '357', '358', '359', '360', '362', '363', '364', '365', '366', '368', '369',
                          '371', '372', '375', '377', '378', '379', '380', '383', '387', '388', '389', '390', '392',
                          '393', '395', '399', '401', '402', '404', '407', '413', '418', '421', '422', '425', '428',
                          '429', '431', '432', '433', '436', '437', '441', '442', '443', '444', '448', '449', '450',
                          '453', '454', '455', '456', '457', '458', '460', '461', '463', '464', '465', '466', '468',
                          '469', '470', '471', '472', '474', '475', '476', '477', '478', '484', '485', '486', '487',
                          '488', '491', '493', '494', '496', '498', '499', '501', '502', '503', '504', '505', '506',
                          '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '518', '519', '520',
                          '521', '522', '524', '525', '527', '528', '529', '530', '531', '532', '534', '535', '536',
                          '537', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550',
                          '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563',
                          '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576',
                          '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589',
                          '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602',
                          '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '615', '616',
                          '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '629', '630',
                          '631', '632', '633', '634', '635', '636', '637', '638', '639', '640', '641', '642', '643',
                          '644', '645', '646', '647', '648', '649', '650', '651', '652', '653', '654', '655', '656',
                          '657', '658', '659', '660', '661', '662']
        # NOTE: Hard_Set_Train: 179
        self.hard_list = ['85', '133', '136', '189', '261', '267', '315', '517', '523', '533', '614', '628', '664',
                          '665', '668', '673', '674', '676', '681', '682', '685', '686', '687', '688', '689', '690',
                          '691', '694', '695', '696', '699', '700', '702', '704', '705', '707', '708', '710', '715',
                          '718', '721', '722', '723', '724', '727', '729', '731', '732', '734', '735', '737', '738',
                          '742', '743', '745', '746', '751', '752', '753', '755', '756', '757', '758', '760', '765',
                          '766', '767', '772', '773', '775', '778', '779', '780', '781', '784', '785', '786', '787',
                          '788', '790', '792', '794', '797', '799', '802', '803', '811', '813', '814', '816', '817',
                          '819', '823', '824', '825', '828', '831', '832', '835', '838', '841', '842', '843', '845',
                          '849', '853', '855', '857', '858', '861', '863', '869', '870', '871', '876', '877', '878',
                          '879', '880', '888', '889', '892', '895', '896', '900', '901', '903', '905', '906', '911',
                          '913', '915', '917', '918', '919', '920', '921', '922', '926', '928', '930', '931', '932',
                          '933', '934', '935', '936', '937', '939', '940', '946', '947', '948', '949', '950', '951',
                          '954', '955', '958', '959', '961', '966', '967', '968', '970', '979', '980', '983', '984',
                          '987', '988', '989', '990', '991', '992', '993', '996', '998', '999']

        # NOTE: Joint_Set_Train: 609
        self.joint_list = ['1', '10', '102', '104', '105', '106', '11', '110', '111', '113', '117', '121', '123',
                           '125', '126', '13', '130', '133', '134', '136', '138', '14', '144', '146', '148', '149',
                           '15', '152', '154', '155', '156', '158', '16', '161', '164', '165', '168', '169', '17',
                           '170', '171', '172', '173', '175', '177', '178', '180', '181', '183', '184', '185', '187',
                           '189', '193', '194', '196', '199', '200', '201', '205', '207', '208', '212', '213', '215',
                           '216', '217', '218', '219', '221', '224', '225', '227', '228', '229', '23', '230', '231',
                           '232', '233', '234', '235', '236', '238', '239', '24', '240', '241', '242', '246', '248',
                           '25', '250', '253', '257', '259', '261', '265', '267', '268', '269', '27', '270', '271',
                           '272', '273', '274', '276', '280', '283', '286', '289', '291', '292', '293', '294', '297',
                           '298', '299', '3', '30', '300', '301', '302', '303', '304', '305', '308', '309', '310',
                           '311', '312', '313', '314', '315', '316', '317', '318', '319', '321', '324', '325', '327',
                           '328', '329', '330', '331', '333', '334', '339', '34', '342', '344', '345', '346', '35',
                           '351', '353', '354', '355', '357', '358', '359', '36', '360', '362', '363', '364', '365',
                           '366', '368', '369', '37', '371', '372', '375', '377', '378', '379', '380', '383', '387',
                           '388', '389', '39', '390', '392', '393', '395', '399', '4', '401', '402', '404', '407',
                           '413', '418', '42', '421', '422', '425', '428', '429', '431', '432', '433', '436', '437',
                           '441', '442', '443', '444', '448', '449', '450', '453', '454', '455', '456', '457', '458',
                           '46', '460', '461', '463', '464', '465', '466', '468', '469', '470', '471', '472', '474',
                           '475', '476', '477', '478', '48', '484', '485', '486', '487', '488', '49', '491', '493',
                           '494', '496', '498', '499', '5', '501', '502', '503', '504', '505', '506', '507', '508',
                           '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '52', '520',
                           '521', '522', '523', '524', '525', '527', '528', '529', '53', '530', '531', '532', '533',
                           '534', '535', '536', '537', '539', '54', '540', '541', '542', '543', '544', '545', '546',
                           '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559',
                           '56', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571',
                           '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584',
                           '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597',
                           '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610',
                           '611', '612', '613', '614', '615', '616', '617', '618', '619', '62', '620', '621', '622',
                           '623', '624', '625', '626', '627', '628', '629', '63', '630', '631', '632', '633', '634',
                           '635', '636', '637', '638', '639', '640', '641', '642', '643', '644', '645', '646', '647',
                           '648', '649', '65', '650', '651', '652', '653', '654', '655', '656', '657', '658', '659',
                           '66', '660', '661', '662', '664', '665', '668', '673', '674', '676', '68', '681', '682',
                           '685', '686', '687', '688', '689', '690', '691', '694', '695', '696', '699', '700', '702',
                           '704', '705', '707', '708', '71', '710', '715', '718', '72', '721', '722', '723', '724',
                           '727', '729', '73', '731', '732', '734', '735', '737', '738', '74', '742', '743', '745',
                           '746', '75', '751', '752', '753', '755', '756', '757', '758', '760', '765', '766', '767',
                           '77', '772', '773', '775', '778', '779', '78', '780', '781', '784', '785', '786', '787',
                           '788', '79', '790', '792', '794', '797', '799', '802', '803', '811', '813', '814', '816',
                           '817', '819', '82', '823', '824', '825', '828', '83', '831', '832', '835', '838', '841',
                           '842', '843', '845', '849', '85', '853', '855', '857', '858', '86', '861', '863', '869',
                           '87', '870', '871', '876', '877', '878', '879', '88', '880', '888', '889', '89', '892',
                           '895', '896', '9', '900', '901', '903', '905', '906', '91', '911', '913', '915', '917',
                           '918', '919', '920', '921', '922', '926', '928', '93', '930', '931', '932', '933', '934',
                           '935', '936', '937', '939', '94', '940', '946', '947', '948', '949', '95', '950', '951',
                           '954', '955', '958', '959', '961', '966', '967', '968', '97', '970', '979', '980', '983',
                           '984', '987', '988', '989', '990', '991', '992', '993', '996', '998', '999']

        self.easy_set = set(self.easy_list)
        self.hard_set = set(self.hard_list)

        if data_fraction is not None:
            self.sequence_list = random.sample(self.easy_list, int(len(self.easy_list) * data_fraction))
        else:
            self.sequence_list = self.easy_list

        # self.sequence_list = ['1']  # for local train
        print(f'Dataset: COMTB_train, seq length: {len(self.sequence_list)}')

    def get_name(self):
        return 'COMTB_trainingSet'

    def _read_bb_anno(self, seq_path):
        bb_anno_file = os.path.join(seq_path, 'groundtruth_rect.txt')
        gt = pandas.read_csv(bb_anno_file, delimiter='\t', header=None, dtype=np.float32, na_filter=False,
                             low_memory=False).values
        return torch.tensor(gt)

    def _read_modality_anno(self, seq_path):
        # 兼容 easy 和 hard 数据集
        file_paths = [
            os.path.join(seq_path, 'modality.tag'),
            os.path.join(seq_path, 'rgb-nir.txt')
        ]

        modality_anno_file = None
        for file_path in file_paths:
            if os.path.isfile(file_path):
                modality_anno_file = file_path
                break

        if modality_anno_file is None:
            raise FileNotFoundError("Neither 'rgb-nir.txt' nor 'modality.tag' found in the provided sequence path.")

        gt = np.loadtxt(modality_anno_file)
        return torch.tensor(gt)

    def get_sequence_info(self, seq_id):
        seq_name = self.sequence_list[seq_id]
        seq_path = os.path.join(self.root, seq_name)
        bbox = self._read_bb_anno(seq_path)
        modality = self._read_modality_anno(seq_path)  # B, 1

        # 增强数据校验
        valid1 = (bbox[:, 2] > 0) & (bbox[:, 3] > 0)
        valid2 = (modality[:] == 0) | (modality[:] == 1) | (modality[:] == 2) | (modality[:] == 3)
        try:
            valid = valid1 & valid2[:len(valid1)]
        except:
            print('Error seq_path:', seq_path)
            valid = valid1

        visible = valid.clone().byte()
        return {'bbox': bbox, 'valid': valid, 'visible': visible, 'modality': modality}

    def _get_frame(self, seq_path, frame_id):
        frame_path = os.path.join(seq_path, 'img', sorted([p for p in os.listdir(os.path.join(seq_path, 'img')) if
                                                           os.path.splitext(p)[1] in ['.jpg', '.png', '.bmp']])[
            frame_id])
        return self.image_loader(frame_path)

    def _get_modality_label(self, seq_path, frame_id):
        # 兼容 easy 和 hard 数据集
        file_paths = [
            os.path.join(seq_path, 'modality.tag'),
            os.path.join(seq_path, 'rgb-nir.txt')
        ]

        modality_anno_file = None
        for file_path in file_paths:
            if os.path.isfile(file_path):
                modality_anno_file = file_path
                break

        rgb_nir_label = np.loadtxt(modality_anno_file)[frame_id]
        return rgb_nir_label

    def get_frames(self, seq_id, frame_ids, anno=None):
        seq_name = self.sequence_list[seq_id]
        seq_path = os.path.join(self.root, seq_name)
        frame_list = [self._get_frame(seq_path, f) for f in frame_ids]
        rgb_nir_label = [self._get_modality_label(seq_path, f) for f in frame_ids]

        # print('get_frames frame_list', len(frame_list))
        if anno is None:
            anno = self.get_sequence_info(seq_path)

        anno_frames = {}
        for key, value in anno.items():
            anno_frames[key] = [value[f_id, ...].clone() for f_id in frame_ids]

        object_meta = OrderedDict({'object_class_name': None,
                                   'motion_class': None,
                                   'major_class': None,
                                   'root_class': None,
                                   'motion_adverb': None})

        if seq_id in self.easy_set:
            # Easy 数据集, 当前0-RGB,1-NIR,2用1代替
            rgb_nir_label = [1 if i == 2 else i for i in rgb_nir_label]
        else:
            # Hard 数据集, 当前0-RGB,1用0代替,2-NIR,3用2代替
            rgb_nir_label = [0 if i == 1 else 2 if i == 3 else i for i in rgb_nir_label]
            rgb_nir_label = [1 if i == 2 else i for i in rgb_nir_label]  # 为了统一NIR用1表示

        modality_label = torch.from_numpy(np.array(rgb_nir_label)).float()
        return frame_list, anno_frames, object_meta, modality_label
